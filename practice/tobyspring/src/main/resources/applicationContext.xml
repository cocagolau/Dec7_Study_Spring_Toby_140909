<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/springbooktest" />
		<property name="username" value="spring" />
		<property name="password" value="book" />
	</bean>
	
	<!-- 새로운 jdbcContext를 bean으로 등록 -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>	
	<bean id="mailSender" class="me.dec7.user.service.DummyMailSender" />
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	
	<!-- 
	 * AOP namespace
	 * 
	 * aop scheme
	 * 	- spring은 AOP에 관련된 태그를 정의
	 * 	- spring에서 AOP를 위해 기계적으로 적용하는 bean을 간편하게 등록할 수 있음

	<aop:config>
		<!-- expression의 표현식 property로 가진 AspectJExpressionPointcut을 bean으로 등록
		<aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))" />
		
		<!-- advice와 pointcut을 property로 가지는 DefaultBeanFactoryPointcutAdvisor를 등록
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>
	
	 * advisor 내장 포인트컷
	-->
	<aop:config>
		<!-- <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl.upgrade*(..))" /> -->
		<!-- id가 Service로 끝나는 모든 bean에 tarnasactionAdvice 빈의 부가기능 적용 -->
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" />
		<!--
		두번째 트랜잭션 속성  
		<aop:advisor advice-ref="batchTxAdvice" pointcut="execution(a.b.*BatchJob.*.(..))" />
		-->
	</aop:config>
	<!-- 
	<tx:advice id="batchTxAdvice">
		<tx:attributes> ... </tx:attributes>
	</tx:advice>
	
	 -->
	
	<!-- 
	- 설정방법
	<bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<!-- readOnly, timeout은 트랜잭션을 시작하는 경우만 적용
				<prop key="get*>PROPAGATION_REQUIRED, readOnly, timeout_30</prop>
				<prop key="upgrade*>PROPAGATION_REQUIREDS_NEW, ISOLATION_SERIALIZABLE</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	 -->
	<!-- 
		tx namespace
		 - TransactionInterceptor 타입의 advice bean
		 - TransactionAttribute 타입의 속성 정보 설정 가능
	 -->
	<!-- 
		tx:advice 태그에 의해 TransactionInterceptor bean 등록
		transactionManager bean 아이디가 transactionManager라면 생략가능
	-->
	<!-- 
		트랜잭션 포인트컷 표현식은 타입패턴 / 빈이름 사용
		
		 - 일반적으로 트랜잭션을 적용할 타깃 클래스의 메소드는 모두 트랜잭션 적용 후보
		 - 보통 비지니스 로직을 담고 있는 클래스의 경우 메소드까지 세밀하게 정의할 필요 없음
		
		 - add() 메소드도 트랜잭션 적용 대상
		 	- 트랜잭션 전파방식을 생각시 add()는 다른 트랜잭션에 참여할 가능성 높음
		 	- add() 메소드 자체만 보아도 UserDao.add()를 호출해서 사용자정보 추가 외에도 DB정보를 다룰 것임
		 
		 - 단순 조회 메소드도 트랜잭션 적용이 좋음
		 	- 조희의 경눙 읽기 전용이면 성능 향상될 것임
		 
		 - 복잡한 조회의 경우 제한시간 지정 가능
		 - 격리 수준에 따라 조회도 반드시 트랜잭셔 안에서 진행할 필요가 발생
		
		 - 따라서,
			 - 트랜잭션용 포인트컷 표현식에는 메소드, 파라미터, 예외에 대한 패턴을 정의하지 않는 것이 좋음
			 - 클래스보다 인터페이스 타입을 기준으로 타입패턴 적용 / 변경빈도 적고 일정패턴 유지
			 - execution()보다 bean() 표현식 고려
		
	 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 
				간단한 메소드 이름 패턴 부여
				get / find 같은 조회전용 메소드 접수어 정함
				실제 시작 위치가 아닐경우 읽기 전용 속성은 무시 됨
			 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30" />
			<tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE" />
			
			<!-- 
				default 트랜잭션 속성 부여
				순서 주의 / get으로 시작하지 않는 나머지 메소드
			-->
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	 <!-- 
	<bean id="transactionAdvice" class="me.dec7.user.service.TransactionAdvice">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	 -->

	<bean id="userService" class="me.dec7.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>
	

	<bean id="userDao" class="me.dec7.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
